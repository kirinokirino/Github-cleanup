extern crate sdl2;

use std::process;
use sdl2::rect::Rect;
use sdl2::event::Event;
use sdl2::keyboard::Keycode;

fn main() {
    let ctx = sdl2::init().unwrap();
    let video_ctx = ctx.video().unwrap();

    let window = match video_ctx
              .window("SDL test", 640, 480)
              .position_centered()
              .opengl()
              .build() {
        Ok(window) => window,
        Err(err) => panic!("failed to create window: {}", err),
    };

    let mut renderer = match window.renderer().build() {
        Ok(renderer) => renderer,
        Err(err) => panic!("failed to create renderer: {}", err),
    };

    // ^ keep

    let brightness = 80;
    let colors = [sdl2::pixels::Color::RGB(0, 0, 0),
                  sdl2::pixels::Color::RGB(255 - brightness, 255 - brightness, 255 - brightness),
                  sdl2::pixels::Color::RGB(255 - brightness, 0, 0)];

	let mut v_rect = vec![Rect::new(10, 10, 10, 10)];
	let mut v_selection = 0;
	
    let mut events = ctx.event_pump().unwrap();
    let mut main_loop = || {
        for event in events.poll_iter() {
            match event {
                Event::Quit { .. } |
                Event::KeyDown { keycode: Some(Keycode::Escape), .. } => {
                    process::exit(1);
                }
                Event::KeyDown { keycode: Some(Keycode::Left), .. } => {
                    for i in 0..v_rect.len() {
						v_rect[i].x -= 10;
					}
                }
                Event::KeyDown { keycode: Some(Keycode::Right), .. } => {
                    for i in 0..v_rect.len() {
						v_rect[i].x += 10;
					}
                }
                Event::KeyDown { keycode: Some(Keycode::Up), .. } => {
                    for i in 0..v_rect.len() {
						v_rect[i].y -= 10;
					}
                }
                Event::KeyDown { keycode: Some(Keycode::Down), .. } => {
                    for i in 0..v_rect.len() {
						v_rect[i].y += 10;
					}
                }
                Event::KeyDown { keycode: Some(Keycode::E), .. } => {
					if !v_rect.is_empty() {
						if !(v_selection == 0) { v_selection -= 1; }
					}
                }
                Event::KeyDown { keycode: Some(Keycode::Q), .. } => {
					if !v_rect.is_empty() {
						if v_selection < v_rect.len()-1 { v_selection += 1; }
					}
                }
                Event::KeyDown { keycode: Some(Keycode::N), .. } => {
                    v_rect.push(Rect::new(10, 10, 10, 10));
                }
                Event::KeyDown { keycode: Some(Keycode::K), .. } => {
                    if !v_rect.is_empty() {
						v_rect.remove(v_selection);
						if !v_rect.is_empty() && v_selection == v_rect.len() { v_selection -= 1; }
					}
                }
                _ => {}
            }
        }
        draw(&mut renderer, &colors, &mut v_rect as &[Rect], v_selection);
    };

    loop {
        main_loop();
    }
}

fn draw(renderer: &mut sdl2::render::Renderer, colors: &[sdl2::pixels::Color], rects: &[Rect], sel: usize) {

    let _ = renderer.set_draw_color(colors[0]);
    let _ = renderer.clear();
    for i in 0..rects.len() {
		let _ = renderer.set_draw_color(colors[1]);
		if i == sel { let _ = renderer.set_draw_color(colors[2]); }
        let _ = renderer.fill_rect(rects[i]);
    }
    let _ = renderer.present();
}
